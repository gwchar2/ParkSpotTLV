// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ParkSpotTLV.Infrastructure;

#nullable disable

namespace ParkSpotTLV.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.ParkingRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<int?>("MaxDurationMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(-1);

                    b.Property<string>("Note")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("ParkingType")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone");

                    b.Property<Guid>("StreetSegmentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StreetSegmentId");

                    b.ToTable("parking_rules", null, t =>
                        {
                            t.HasCheckConstraint("ck_parkingrule_dayofweek_range", "\"DayOfWeek\" BETWEEN 0 AND 6");

                            t.HasCheckConstraint("ck_parkingrule_time_order", "\"StartTime\" < \"EndTime\"");
                        });
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.Permit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("ValidTo")
                        .HasColumnType("date");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ZoneId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.HasIndex("VehicleId", "ZoneId", "Type");

                    b.ToTable("permits", (string)null);
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.StreetSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CarsOnly")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("FromNodeId")
                        .HasColumnType("uuid");

                    b.Property<LineString>("Geom")
                        .IsRequired()
                        .HasColumnType("geometry(LineString,4326)");

                    b.Property<DateTimeOffset?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("LengthMeters")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("ParkingHours")
                        .HasColumnType("integer");

                    b.Property<int>("ParkingType")
                        .HasColumnType("integer");

                    b.Property<int>("Side")
                        .HasColumnType("integer");

                    b.Property<int>("StylePriority")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ToNodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ZoneId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Geom");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Geom"), "GIST");

                    b.HasIndex("StylePriority");

                    b.HasIndex("ZoneId");

                    b.ToTable("street_segments", (string)null);
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("PlateNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PlateNumber")
                        .IsUnique();

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.Zone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Code")
                        .HasColumnType("integer");

                    b.Property<MultiPolygon>("Geom")
                        .IsRequired()
                        .HasColumnType("geometry(MultiPolygon,4326)");

                    b.Property<DateTimeOffset?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("Geom");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Geom"), "GIST");

                    b.ToTable("zones", (string)null);
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.ParkingRule", b =>
                {
                    b.HasOne("ParkSpotTLV.Infrastructure.Entities.StreetSegment", "StreetSegment")
                        .WithMany("ParkingRules")
                        .HasForeignKey("StreetSegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StreetSegment");
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.Permit", b =>
                {
                    b.HasOne("ParkSpotTLV.Infrastructure.Entities.Vehicle", "Vehicle")
                        .WithMany("Permits")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ParkSpotTLV.Infrastructure.Entities.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Vehicle");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.StreetSegment", b =>
                {
                    b.HasOne("ParkSpotTLV.Infrastructure.Entities.Zone", "Zone")
                        .WithMany("Segments")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.Vehicle", b =>
                {
                    b.HasOne("ParkSpotTLV.Infrastructure.Entities.User", "Owner")
                        .WithMany("Vehicles")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.StreetSegment", b =>
                {
                    b.Navigation("ParkingRules");
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.User", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.Vehicle", b =>
                {
                    b.Navigation("Permits");
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.Zone", b =>
                {
                    b.Navigation("Segments");
                });
#pragma warning restore 612, 618
        }
    }
}
