// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ParkSpotTLV.Infrastructure;

#nullable disable

namespace ParkSpotTLV.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.Permit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateOnly?>("ValidTo")
                        .HasColumnType("date")
                        .HasColumnName("valid_to");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.Property<int?>("ZoneCode")
                        .HasColumnType("integer")
                        .HasColumnName("zone_code");

                    b.HasKey("Id")
                        .HasName("pk_permits");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_permits_vehicle_id");

                    b.HasIndex("ZoneCode")
                        .HasDatabaseName("ix_permits_zone_code");

                    b.ToTable("permits", (string)null);
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTimeOffset>("ExpiresAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at_utc");

                    b.Property<string>("ReplacedByTokenHash")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("replaced_by_token_hash");

                    b.Property<DateTimeOffset?>("RevokedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_at_utc");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("token_hash");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("ExpiresAtUtc")
                        .HasDatabaseName("ix_refresh_tokens_expires_at_utc");

                    b.HasIndex("ReplacedByTokenHash")
                        .HasDatabaseName("ix_refresh_tokens_replaced_by_token_hash");

                    b.HasIndex("RevokedAtUtc")
                        .HasDatabaseName("ix_refresh_tokens_revoked_at_utc");

                    b.HasIndex("TokenHash")
                        .IsUnique()
                        .HasDatabaseName("ix_refresh_tokens_token_hash");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.StreetSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<LineString>("Geom")
                        .IsRequired()
                        .HasColumnType("geometry(LineString,4326)")
                        .HasColumnName("geom");

                    b.Property<DateTimeOffset?>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("NameEnglish")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name_english");

                    b.Property<string>("NameHebrew")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name_hebrew");

                    b.Property<string>("OSMId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("osm_id");

                    b.Property<int>("ParkingType")
                        .HasColumnType("integer")
                        .HasColumnName("parking_type");

                    b.Property<int>("Side")
                        .HasColumnType("integer")
                        .HasColumnName("side");

                    b.Property<Guid?>("ZoneId")
                        .HasColumnType("uuid")
                        .HasColumnName("zone_id");

                    b.HasKey("Id")
                        .HasName("pk_street_segments");

                    b.HasIndex("Geom")
                        .HasDatabaseName("ix_street_segments_geom");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Geom"), "GIST");

                    b.HasIndex("OSMId")
                        .HasDatabaseName("ix_street_segments_osm_id");

                    b.HasIndex("ZoneId")
                        .HasDatabaseName("ix_street_segments_zone_id");

                    b.ToTable("street_segments", (string)null);
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_users_username");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<uint>("Xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_vehicles");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_vehicles_owner_id");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.Zone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<MultiPolygon>("Geom")
                        .IsRequired()
                        .HasColumnType("geometry(MultiPolygon,4326)")
                        .HasColumnName("geom");

                    b.Property<DateTimeOffset?>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("name");

                    b.Property<int>("Taarif")
                        .HasColumnType("integer")
                        .HasColumnName("taarif");

                    b.HasKey("Id")
                        .HasName("pk_zones");

                    b.HasAlternateKey("Code")
                        .HasName("ak_zones_code");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_zones_code");

                    b.HasIndex("Geom")
                        .HasDatabaseName("ix_zones_geom");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Geom"), "GIST");

                    b.ToTable("zones", (string)null);
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.Permit", b =>
                {
                    b.HasOne("ParkSpotTLV.Infrastructure.Entities.Vehicle", "Vehicle")
                        .WithMany("Permits")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_permits_vehicles_vehicle_id");

                    b.HasOne("ParkSpotTLV.Infrastructure.Entities.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneCode")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_permits_zones_zone_code");

                    b.Navigation("Vehicle");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.RefreshToken", b =>
                {
                    b.HasOne("ParkSpotTLV.Infrastructure.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.StreetSegment", b =>
                {
                    b.HasOne("ParkSpotTLV.Infrastructure.Entities.Zone", "Zone")
                        .WithMany("Segments")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_street_segments_zones_zone_id");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.Vehicle", b =>
                {
                    b.HasOne("ParkSpotTLV.Infrastructure.Entities.User", "Owner")
                        .WithMany("Vehicles")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vehicles_users_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.Vehicle", b =>
                {
                    b.Navigation("Permits");
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.Zone", b =>
                {
                    b.Navigation("Segments");
                });
#pragma warning restore 612, 618
        }
    }
}
