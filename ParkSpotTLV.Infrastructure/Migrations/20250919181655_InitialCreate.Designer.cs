// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ParkSpotTLV.Infrastructure;

#nullable disable

namespace ParkSpotTLV.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250919181655_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.StreetSegment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CarsOnly")
                        .HasColumnType("boolean");

                    b.Property<MultiLineString>("Geom")
                        .IsRequired()
                        .HasColumnType("geometry(MultiLineString,4326)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ParkingHours")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<string>("ParkingType")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<Guid?>("ZoneId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CarsOnly");

                    b.HasIndex("Geom")
                        .HasDatabaseName("gist_segments_geometry");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Geom"), "gist");

                    b.HasIndex("ZoneId")
                        .HasDatabaseName("ix_segments_zone_id");

                    b.ToTable("street_segments", (string)null);
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ux_users_username");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("HasDisabledPermit")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<int>("ZonePermit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_vehicles_owner_id");

                    b.ToTable("vehicles", null, t =>
                        {
                            t.HasCheckConstraint("ck_vehicle_zone_permit", "\"ZonePermit\" >= 0 AND \"ZonePermit\" <= 10");
                        });
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.Zone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<MultiPolygon>("Geom")
                        .IsRequired()
                        .HasColumnType("geometry(MultiPolygon,4326)");

                    b.Property<int>("ZonePermit")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Geom")
                        .HasDatabaseName("gist_zones_geometry");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Geom"), "gist");

                    b.HasIndex("ZonePermit")
                        .IsUnique()
                        .HasDatabaseName("ux_zones_zone_permit");

                    b.ToTable("zones", (string)null);
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.StreetSegment", b =>
                {
                    b.HasOne("ParkSpotTLV.Infrastructure.Entities.Zone", "Zone")
                        .WithMany("Segments")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.Vehicle", b =>
                {
                    b.HasOne("ParkSpotTLV.Infrastructure.Entities.User", "Owner")
                        .WithMany("Vehicles")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.User", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("ParkSpotTLV.Infrastructure.Entities.Zone", b =>
                {
                    b.Navigation("Segments");
                });
#pragma warning restore 612, 618
        }
    }
}
